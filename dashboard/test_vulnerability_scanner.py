"""
Test script to verify the vulnerability scanner functionality.
"""

import os
import sys
import json
import importlib.util

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dashboard.settings')
import django
django.setup()

# Now import Django models after setting up Django
from scanner.models import Target, VulnerabilityCheckup, Vulnerability

# Get the current directory and add it to the path
current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(f"Current directory: {current_dir}")
sys.path.insert(0, current_dir)

# Create a simple socket connection test
import socket
agent_ip = "192.168.29.244"  # Replace with your agent IP
agent_port = 23033

print(f"\nTesting basic socket connection to {agent_ip}:{agent_port}...")
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(5)
    result = s.connect_ex((agent_ip, agent_port))
    if result == 0:
        print(f"Socket connection successful!")
        s.close()
    else:
        print(f"Socket connection failed with error code: {result}")
        print("Please check if the agent is running and the IP address is correct.")
        sys.exit(1)
except Exception as e:
    print(f"Socket connection error: {str(e)}")
    sys.exit(1)

# Define the protocol constants manually
CMD_VULNERABILITY_SCAN = 0x50  # 80 in decimal
print(f"Using CMD_VULNERABILITY_SCAN = {CMD_VULNERABILITY_SCAN} (0x{CMD_VULNERABILITY_SCAN:02X})")

# Define a simplified send_command function
def send_command(target_ip, cmd_code, payload='', verbose=False):
    """
    Send a command to the agent and return the response.
    """
    try:
        # Convert string payload to bytes if needed
        if isinstance(payload, str):
            payload_bytes = payload.encode()
        else:
            payload_bytes = payload

        if verbose:
            print(f"Sending command {cmd_code} to agent at {target_ip}")
            print(f"Payload: {payload}")

        # Create a socket connection
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(30)  # Increased timeout for vulnerability scans

        if verbose:
            print(f"Connecting to agent...")
        s.connect((target_ip, 23033))
        if verbose:
            print(f"Connected to agent")

        # Build the request header
        # Magic header (6 bytes) + version (1 byte) + flags (1 byte) +
        # request ID (4 bytes) + command code (1 byte) + payload length (4 bytes) +
        # reserved (2 bytes)
        import struct
        magic = b'ZAMBOT'
        version = 1
        flags = 0
        req_id = 1
        header = struct.pack(">6s B B I B I H",
                            magic, version, flags, req_id,
                            cmd_code, len(payload_bytes), 0)

        if verbose:
            print(f"Sending request header and payload (total {len(header) + len(payload_bytes)} bytes)")
        s.sendall(header + payload_bytes)
        if verbose:
            print(f"Request sent")

        # Receive response header
        if verbose:
            print(f"Waiting for response header...")
        response_header = s.recv(19)  # Header size is 19 bytes
        if verbose:
            print(f"Received response header ({len(response_header)} bytes)")

        # Parse header
        magic, version, flags, req_id, status_code, payload_len, reserved = struct.unpack(">6s B B I B I H", response_header)

        if verbose:
            print(f"Response header: magic={magic}, version={version}, flags={flags}, req_id={req_id}, status_code={status_code}, payload_len={payload_len}")

        # Receive response payload
        if payload_len > 0:
            if verbose:
                print(f"Receiving response payload ({payload_len} bytes)...")

            received_data = b""
            chunk_size = 4096  # Receive in 4KB chunks

            while len(received_data) < payload_len:
                chunk = s.recv(min(chunk_size, payload_len - len(received_data)))
                if not chunk:
                    break
                received_data += chunk

                # Print progress if verbose
                if verbose and payload_len > 10240:  # Only for responses > 10KB
                    progress = len(received_data) / payload_len * 100
                    print(f"Progress: {progress:.0f}% - Received {len(received_data)} of {payload_len} bytes")

            if verbose:
                print(f"Received {len(received_data)} bytes")

            s.close()
            return received_data.decode('utf-8', errors='replace')
        else:
            s.close()
            return ""

    except Exception as e:
        print(f"Error sending command: {str(e)}")
        return None

# Get a target from the database
target = Target.objects.first()
if not target:
    print("No targets found in the database. Please add a target first.")
    sys.exit(1)

print(f"Using target: {target.ip_address} ({target.hostname})")

# Send a vulnerability scan command to the agent
print(f"\nSending vulnerability scan command to agent at {target.ip_address}...")
try:
    response = send_command(target.ip_address, CMD_VULNERABILITY_SCAN, "quick", verbose=True)

    if response:
        print("\nReceived response from agent")
        print(f"Response type: {type(response)}")
        print(f"Response length: {len(response) if response else 0}")

        # Try to parse the JSON response
        try:
            # If response is bytes, decode it first
            if isinstance(response, bytes):
                response_str = response.decode('utf-8', errors='replace')
            else:
                response_str = response

            print(f"Response preview: {response_str[:200]}...")

            result = json.loads(response_str)
            print(f"Successfully parsed JSON response")
            print(f"Scan status: {result.get('status')}")
            print(f"Total vulnerabilities: {result.get('total_vulnerabilities')}")

            # Print the first few vulnerabilities
            vulnerabilities = result.get('vulnerabilities', [])
            print(f"First few vulnerabilities:")
            for i, vuln in enumerate(vulnerabilities[:3]):
                print(f"  {i+1}. {vuln.get('title')} - {vuln.get('severity')}")

            # Create a vulnerability checkup
            print("\nCreating vulnerability checkup in the database...")

            # Count vulnerabilities by severity
            high_count = len([v for v in vulnerabilities if v.get('severity') in ['high', 'critical']])
            medium_count = len([v for v in vulnerabilities if v.get('severity') == 'medium'])
            low_count = len([v for v in vulnerabilities if v.get('severity') == 'low'])

            # Create the checkup
            checkup = VulnerabilityCheckup.objects.create(
                target=target,
                scan_type=result.get('scan_type', 'quick'),
                status='completed',
                total_vulnerabilities=len(vulnerabilities),
                high_vulnerabilities=high_count,
                medium_vulnerabilities=medium_count,
                low_vulnerabilities=low_count
            )
            print(f"Created checkup with ID: {checkup.id}")

            # Add vulnerabilities to the checkup
            print("Adding vulnerabilities to the checkup...")
            for vuln in vulnerabilities:
                Vulnerability.objects.create(
                    checkup=checkup,
                    target=target,  # Also need to set the target
                    title=vuln.get('title', 'Unknown Vulnerability'),
                    description=vuln.get('description', ''),
                    severity=vuln.get('severity', 'medium'),
                    cve_id=vuln.get('cve_id'),
                    affected_component=vuln.get('affected_component', 'Unknown'),
                    remediation_steps=vuln.get('remediation_steps', '')
                )

            print(f"Added {len(vulnerabilities)} vulnerabilities to the checkup")
            print("\nTest completed successfully!")

        except json.JSONDecodeError as e:
            print(f"Error parsing JSON response: {str(e)}")
            print(f"Response preview: {response_str[:200]}...")
    else:
        print("No response received from agent")

except Exception as e:
    print(f"Error: {str(e)}")
